{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistList/TodolistList.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","setAppStatusAC","status","res","resultCode","isLoggedIn","rejectWithValue","logoutTC","slice","createSlice","name","initialState","reducers","setIsLoggedInAC","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","build","appReducer","getTodolistsThunk","todos","removeTodolistTC","changeTodolistEntityStatusAC","addTodolistTC","todolist","item","updateTodolistTC","changeTodolistFilterAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","getTasksTC","tasks","items","removeTaskTC","addTaskTC","task","updateTask","getState","find","t","apiModel","deadline","description","priority","startDate","tasksReducer","forEach","todoListId","rootReducer","combineReducers","todolists","app","auth","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","Grid","container","justifyContent","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","Button","AddItemForm","memo","useState","setTitle","setError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","checked","Completed","New","onTitleChangeHandler","newValue","className","Delete","Todolist","demo","useEffect","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","TodolistList","addTodolist","padding","spacing","allTodolistTasks","Paper","App","AppBar","position","Toolbar","IconButton","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2366a31f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4fa02be0-fc45-4f63-a405-9880e98f8e95'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me');\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// types\r\n\r\ntype AuthMeType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    /*dispatch(setAppStatusAC('failed'))*/\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n    /*dispatch(setAppStatusAC('failed'))*/\r\n}","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from 'axios';\r\n\r\nexport const loginTC = createAsyncThunk('auth/login', async (param: LoginParamsType, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: true}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return thunkAPI.rejectWithValue(res.data)\r\n            // return {isLoggedIn: false}\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return thunkAPI.rejectWithValue(error)\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {isLoggedIn: false}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return {isLoggedIn: false}\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return thunkAPI.rejectWithValue({error})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        })\r\n    }\r\n\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, thunkAPI) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setIsLoggedInAC({isLoggedIn: true}));\r\n            return {isLoggedIn: true}\r\n        }\r\n\r\n    } catch (e) {\r\n\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle' as RequestStatusType,\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: (build) => {\r\n        build.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const getTodolistsThunk = createAsyncThunk('todolists/getTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        let todos = res.data\r\n        return {todos}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const removeTodolistTC = createAsyncThunk('todolists/removeTodolist', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            return {id: todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(res.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const addTodolistTC = createAsyncThunk('todolists/addTodolist', async (param: { title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(param.title)\r\n        if (res.data.resultCode === 0) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            if (res.data.messages.length) {\r\n                thunkAPI.dispatch(setAppErrorAC({error: res.data.messages[0]}))\r\n            } else {\r\n                thunkAPI.dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n            }\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const updateTodolistTC = createAsyncThunk('todolists/updateTodolist', async (param: { id: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(res.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: (build) => {\r\n        build.addCase(getTodolistsThunk.fulfilled, (state, action) => {\r\n            return action.payload.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        })\r\n        build.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        })\r\n        build.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            }\r\n        })\r\n        build.addCase(updateTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {changeTodolistFilterAC, changeTodolistEntityStatusAC} = slice.actions\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport type ChangeTodolistEntityStatusACActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n","import {addTodolistTC, getTodolistsThunk, removeTodolistTC} from './todolists-reducer';\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\n\r\nexport const getTasksTC = createAsyncThunk('task/fetchTask', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        return {todolistId, tasks: res.data.items}\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error: error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const removeTaskTC = createAsyncThunk('task/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        if (res.data.resultCode === 0) {\r\n            return {taskId: param.taskId, todolistId: param.todolistId}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(res.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('task/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            let task = res.data.data.item\r\n            return {task}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(res.data)\r\n        }\r\n    } catch (err) {\r\n        const error = err as AxiosError\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    } finally {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    }\r\n})\r\n\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find((t: TaskType) => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    try {\r\n        const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(res.data)\r\n        }\r\n    } catch (error: any) {\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({error})\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {} as TasksStateType,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistTC.fulfilled, (state, action) => {\r\n            if (action.payload) {\r\n                state[action.payload.todolist.id] = []\r\n            }\r\n        })\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(getTodolistsThunk.fulfilled, (state, action) => {\r\n            action.payload.todos.forEach((tl: any) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(getTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        })\r\n        builder.addCase(updateTask.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import * as React from 'react';\r\n\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n           return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Length password should be 3 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}><FormGroup>\r\n                    <TextField label=\"Email\"\r\n                               margin=\"normal\"\r\n                               {...formik.getFieldProps('email')}\r\n                    />\r\n\r\n                    {formik.touched.email && formik.errors.email &&\r\n                    <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                    <TextField type=\"password\"\r\n                               label=\"Password\"\r\n                               margin=\"normal\"\r\n                               {...formik.getFieldProps('password')}\r\n                    />\r\n\r\n                    {formik.touched.password && formik.errors.password &&\r\n                    <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                    <FormControlLabel label={'Remember me'}\r\n                                      control={<Checkbox/>}\r\n                                      {...formik.getFieldProps('rememberMe')}\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup></form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onChange={changeTitle}\r\n                     autoFocus\r\n                     onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {updateTask} from '../../tasks-reducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        }))\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        dispatch(updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        }))\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"../tasks-reducer\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(getTasksTC(props.id))\r\n    }, [demo, dispatch, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    FilterValuesType,\r\n    getTodolistsThunk,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n    updateTodolistTC\r\n} from \"../TodolistsList/todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType,} from \"../TodolistsList/tasks-reducer\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"../TodolistsList/Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype TodolistListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList: React.FC<TodolistListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = getTodolistsThunk()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        dispatch(removeTaskTC({taskId, todolistId}))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC({title, todolistId}))\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        dispatch(removeTodolistTC(todolistId))\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(updateTodolistTC({id, title}))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC({title}))\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    // changeTaskStatus={changeTaskStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    // changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {CircularProgress, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {useEffect} from \"react\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {AppBar} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        if (!demo) {\r\n            dispatch(initializeAppTC())\r\n        }\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Login</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistList demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport App from \"./app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter><App/></HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}