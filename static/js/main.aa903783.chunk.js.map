{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistList/TodolistList.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","setAppStatusAC","rootReducer","combineReducers","tasks","state","action","copyState","todos","forEach","tl","filter","t","task","todoListId","map","todolist","todolists","entityStatus","app","auth","store","createStore","applyMiddleware","thunk","Alert","React","props","ref","elevation","variant","ErrorSnackbar","useSelector","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","then","res","resultCode","catch","resetForm","to","Grid","container","justifyContent","item","FormControl","FormLabel","href","target","handleSubmit","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","memo","useState","setTitle","setError","console","log","addItem","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","disabled","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","demo","useEffect","getTasksAC","items","finally","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","paddingTop","TodolistList","getState","setTodos","removeTaskAC","removeTaskTC","addTaskAC","addTaskTC","currentTask","find","priority","startDate","deadline","description","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","removeTodolistAC","changeTodolistTitleAC","updateTodolistTC","addTodolist","addTodolistTC","padding","spacing","allTodolistTasks","Paper","App","AppBar","position","Toolbar","IconButton","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa903783.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4fa02be0-fc45-4f63-a405-9880e98f8e95'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<AuthMeType>>('auth/me');\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// types\r\n\r\ntype AuthMeType = {\r\n    id: string\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, SetAppStatusActionType,} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    /*dispatch(setAppStatusAC('failed'))*/\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(error.message))\r\n    /*dispatch(setAppStatusAC('failed'))*/\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import { Dispatch } from 'redux'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {addTaskAC} from \"../TodolistsList/tasks-reducer\";\r\nimport {authAPI} from \"../../api/todolists-api\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsLoggedInAC(true))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n//action\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\n// thunk\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n\r\n            } /*else {\r\n        }*/\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppIsInitializedAC(true))\r\n        })\r\n}\r\n\r\n\r\n//types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppIsInitializedACActionType = ReturnType<typeof setAppIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | SetAppIsInitializedACActionType\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {SetAppErrorActionType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"GET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n        case \"SET-TODOS\": {\r\n            const copyState = {...state}\r\n            action.todos.forEach((tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'CHANGE-TASK-STATUS':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            }\r\n\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            }\r\n\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-STATUS', taskId, status, todolistId,} as const)\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const)\r\n\r\nexport const getTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'GET-TASKS', todolistId, tasks} as const)\r\n\r\n// thunks\r\n\r\nexport const getTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(getTasksAC(todolistId, res.data.items))\r\n                /*dispatch(setAppStatusAC('succeeded'))*/\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                // dispatch(setAppErrorAC(error.message))\r\n                // dispatch(setAppStatusAC('failed'))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todolistId))\r\n                    /*dispatch(setAppStatusAC('succeeded'))*/\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    let task = res.data.data.item\r\n                    dispatch(addTaskAC(task))\r\n                    /*dispatch(setAppStatusAC('succeeded'))*/\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    // if (res.data.messages.length) {\r\n                    //     dispatch(setAppErrorAC(res.data.messages[0]))\r\n                    // } else {\r\n                    //     dispatch(setAppErrorAC('Some error occurred'))\r\n                    // }\r\n                    // dispatch(setAppStatusAC('failed'))\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                // dispatch(setAppErrorAC(error.message))\r\n                // dispatch(setAppStatusAC('failed'))\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n\r\n        const allTasks = getState().tasks\r\n        const tasksForCurrentTodo = allTasks[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find(t => t.id === taskId)\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                description: currentTask.description\r\n            }\r\n            todolistsAPI.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n                .finally(() => {\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const allTask = getState().tasks\r\n        const tasksForCurrentTodo = allTask[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find(t => t.id === taskId)\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline\r\n            }\r\n            todolistsAPI.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n                       /* dispatch(setAppStatusAC('succeeded'))*/\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch)\r\n                    }\r\n\r\n                })\r\n                .catch((error: AxiosError) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                })\r\n                .finally(() => {\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                })\r\n        }\r\n    }\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof getTasksAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType\r\n    | SetAppErrorActionType\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return  state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action\r\n\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\n\r\nexport const addTodolistAC = (/*title: string,*/ todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', /*title: title,*/ todolist} as const)\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const)\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const)\r\n\r\nexport const setTodos = (todos: Array<TodolistType>) =>\r\n    ({type: 'SET-TODOS', todos} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status} as const)\r\n\r\n// Thunk\r\n\r\nexport const getTodolistsThunk = () => (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            let todos = res.data\r\n            dispatch(setTodos(todos))\r\n           /* dispatch(setAppStatusAC('succeeded'))*/\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n            // dispatch(setAppErrorAC(error.message))\r\n            // dispatch(setAppStatusAC('failed'))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                /*dispatch(setAppStatusAC('succeeded'))*/\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                /*dispatch(setAppStatusAC('succeeded'))*/\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n               /* dispatch(setAppStatusAC('failed'))*/\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n\r\nexport const updateTodolistTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode) {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n\r\n}\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodosActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ChangeTodolistEntityStatusACActionType\r\n\r\nexport type SetTodosActionType = ReturnType<typeof setTodos>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type ChangeTodolistEntityStatusACActionType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import * as React from 'react';\r\n\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n           return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    //const navigate = useNavigate()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if ( values.password.length < 3) {\r\n                errors.password = 'Length password should be 3 symbols';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n   // if (isLoggedIn) navigate('/')   //alternative\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={formik.handleSubmit}><FormGroup>\r\n                    <TextField label=\"Email\"\r\n                               margin=\"normal\"\r\n                        {...formik.getFieldProps('email')}\r\n                               // onBlur={formik.handleBlur}\r\n                               // onChange={formik.handleChange}\r\n                               // value={formik.values.email}\r\n                               // name='email'\r\n                    />\r\n\r\n                    {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                    <TextField type=\"password\"\r\n                               label=\"Password\"\r\n                               margin=\"normal\"\r\n                               {...formik.getFieldProps('password')}\r\n                               // onBlur={formik.handleBlur}\r\n                               // onChange={formik.handleChange}\r\n                               // value={formik.values.password}\r\n                               // name='password'\r\n                    />\r\n\r\n                    {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                    <FormControlLabel label={'Remember me'}\r\n                                      control={<Checkbox/>}\r\n                                      {...formik.getFieldProps('rememberMe')}\r\n                                      // onBlur={formik.handleBlur}\r\n                                      // onChange={formik.handleChange}\r\n                                      // checked={formik.values.rememberMe}\r\n                                      // name='rememberMe'\r\n                    />\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n                </FormGroup></form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    entityStatus?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    console.log('AddItemForm')\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.entityStatus}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title}\r\n                     onChange={changeTitle}\r\n                     autoFocus\r\n                     onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n\r\n/*\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, /!*taskId: string*!/) => void\r\n    changeTaskTitle: (taskId: string, newValue: string) => void\r\n    /!*todolistId: string*!/\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    console.log('Task')\r\n\r\n    const {id, title, isDone} = props.task\r\n\r\n    const onClickHandler = useCallback(() =>\r\n        props.removeTask(id, /!*props.id*!//!* props.todolistId*!/), [props.removeTask, id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(id, newIsDoneValue, /!*props.id*!/);\r\n    }, [props.changeTaskStatus, id])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(id, newValue,/!* props.id*!/);\r\n    }, [props.changeTaskTitle, id])\r\n\r\n    return <div key={props.task.id} className={isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n*/\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"../tasks-reducer\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n    demo?: boolean\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} entityStatus={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilterAC,\r\n    addTodolistTC,\r\n    FilterValuesType,\r\n    getTodolistsThunk,\r\n    removeTodolistTC,\r\n    TodolistDomainType,\r\n    updateTodolistTC\r\n} from \"../TodolistsList/todolists-reducer\";\r\nimport {\r\n    addTaskTC,\r\n    removeTaskTC,\r\n    TasksStateType,\r\n    updateTaskStatusTC,\r\n    updateTaskTitleTC\r\n} from \"../TodolistsList/tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"../TodolistsList/Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype TodolistListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistList: React.FC<TodolistListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = getTodolistsThunk()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        // const action = removeTaskAC(id, todolistId);\r\n        // dispatch(action);\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        // const action = addTaskAC(title, todolistId);\r\n        // dispatch(action);\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        // const action = changeTaskStatusAC(id, status, todolistId);\r\n        // dispatch(action);\r\n        dispatch(updateTaskStatusTC(todolistId, id, status))\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        // const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        // dispatch(action);\r\n        dispatch(updateTaskTitleTC(todolistId, id, newTitle))\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        // const action = removeTodolistAC(id);\r\n        // dispatch(action);\r\n        dispatch(removeTodolistTC(id))\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        // const action = changeTodolistTitleAC(id, title);\r\n        // dispatch(action);\r\n        dispatch(updateTodolistTC(id, title))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        // const action = addTodolistAC(title);\r\n        // dispatch(action);\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id];\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    filter={tl.filter}\r\n                                    entityStatus={tl.entityStatus}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeTaskStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport {CircularProgress, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {useEffect} from \"react\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport { AppBar } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Login</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path='/' element={<TodolistList demo={demo}/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='404' element={<h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n/*\r\nimport React from 'react'\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistList} from \"../features/TodolistList/TodolistList\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport ErrorSnackbar from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            { status === 'loading' && <LinearProgress/>}\r\n            <Container fixed>\r\n                <TodolistList/>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n*/\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport App from \"./app/App\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <HashRouter><App/></HashRouter>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}