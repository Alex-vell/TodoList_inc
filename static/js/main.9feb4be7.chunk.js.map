{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","getTodolistsThunk","dispatch","getState","then","response","todos","data","type","setTodos","rootReducer","combineReducers","tasks","state","action","copyState","forEach","tl","stateCopy","newTasks","filter","t","task","todoListId","todolistTasks","newTasksArray","map","status","todolist","todolists","store","createStore","applyMiddleware","thunk","AddItemForm","React","memo","props","useState","setTitle","error","setError","console","log","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","res","getTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","App","useSelector","removeTaskAC","removeTaskTC","item","addTaskAC","createTaskTC","currentTask","find","priority","startDate","deadline","description","changeTaskStatusAC","updateTaskStatusTC","newTitle","changeTaskTitleAC","updateTaskTitleTC","removeTodolistAC","changeTodolistTitleAC","updateTodolistTC","addTodolist","createTodolistTC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","allTodolistTasks","Paper","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9feb4be7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '724c553c-960a-4a5c-aa67-c9d1bcd4ed73'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {TasksStateType} from '../App';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodosActionType} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"GET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n            // const copyState = {...state}\r\n            // copyState[action.todolistId] = action.tasks\r\n            // return copyState\r\n\r\n        case \"SET-TODOS\": {\r\n            const copyState = {...state}\r\n            action.todos.forEach((tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            // const newTask: TaskType = {\r\n            //     id: v1(),\r\n            //     title: action.title,\r\n            //     status: TaskStatuses.New,\r\n            //     todoListId: action.todolistId, description: '',\r\n            //     startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            // }\r\n            // const tasks = stateCopy[action.todolistId];\r\n            // const newTasks = [newTask, ...tasks];\r\n            // stateCopy[action.todolistId] = newTasks;\r\n            // return stateCopy;\r\n            const tasks = stateCopy[action.task.todoListId];\r\n            const newTasks = [action.task, ...tasks];\r\n            stateCopy[action.task.todoListId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\n\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-STATUS', status, todolistId, taskId} as const)\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) =>\r\n    ({type: 'CHANGE-TASK-TITLE', title, todolistId, taskId} as const)\r\n\r\nexport const getTasksAC = (todolistId: string, tasks: Array<TaskType>) =>\r\n    ({type: 'GET-TASKS', todolistId, tasks} as const)\r\n\r\n// thunks\r\n\r\nexport const getTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.getTasks(todolistId)\r\n            .then((res) => {\r\n                dispatch(getTasksAC(todolistId, res.data.items))\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.deleteTask(todolistId, taskId)\r\n            .then((res) => {\r\n                dispatch(removeTaskAC(taskId, todolistId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const createTaskTC = (title: string, todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                let task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTaskStatusTC = (todolistId: string, taskId: string, status: TaskStatuses) => {\r\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTasks = getState().tasks\r\n        const tasksForCurrentTodo = allTasks[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find(t => t.id === taskId)\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title: currentTask.title,\r\n                status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                description: currentTask.description\r\n            }\r\n            todolistsAPI.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n\r\n                    dispatch(changeTaskStatusAC(taskId, status, todolistId))\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTaskTitleTC = (todolistId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n\r\n        const allTask = getState().tasks\r\n        const tasksForCurrentTodo = allTask[todolistId]\r\n        const currentTask = tasksForCurrentTodo.find(t => t.id === taskId)\r\n\r\n        if (currentTask) {\r\n            const model: UpdateTaskModelType = {\r\n                title,\r\n                description: currentTask.description,\r\n                status: currentTask.status,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline\r\n            }\r\n            todolistsAPI.updateTask(todolistId, taskId, model)\r\n                .then((res) => {\r\n                    dispatch(changeTaskTitleAC(taskId, title, todolistId))\r\n                })\r\n        }\r\n    }\r\n\r\n    // types\r\n\r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof getTasksAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodosActionType","import {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-TODOS\":\r\n            return action.todos.map(tl => ({...tl, filter: 'all'}))\r\n\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state ]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? { ...tl, title: action.title} : tl)\r\n\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// action\r\n\r\nexport const removeTodolistAC = (todolistId: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id: todolistId} as const)\r\n\r\nexport const addTodolistAC = (/*title: string,*/ todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', /*title: title,*/ todolist} as const)\r\n\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id: id, title: title} as const)\r\n\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter} as const)\r\n\r\nexport const setTodos = (todos: Array<TodolistType>) =>\r\n    ({type: 'SET-TODOS', todos} as const)\r\n\r\n// Thunk\r\n\r\nexport const getTodolistsThunk = (dispatch: Dispatch, getState: () => AppRootStateType): void => {\r\n    // side effects\r\n    todolistsAPI.getTodolists()\r\n        .then((response) => {\r\n            //2.dispatch action (thunk)\r\n            let todos = response.data\r\n            dispatch(setTodos(todos))\r\n        })\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const updateTodolistTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n\r\n}\r\n\r\n// types\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | SetTodosActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n\r\nexport type SetTodosActionType = ReturnType<typeof setTodos>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    console.log('AddItemForm')\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n\r\n/*\r\nimport React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, /!*taskId: string*!/) => void\r\n    changeTaskTitle: (taskId: string, newValue: string) => void\r\n    /!*todolistId: string*!/\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    console.log('Task')\r\n\r\n    const {id, title, isDone} = props.task\r\n\r\n    const onClickHandler = useCallback(() =>\r\n        props.removeTask(id, /!*props.id*!//!* props.todolistId*!/), [props.removeTask, id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(id, newIsDoneValue, /!*props.id*!/);\r\n    }, [props.changeTaskStatus, id])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(id, newValue,/!* props.id*!/);\r\n    }, [props.changeTaskTitle, id])\r\n\r\n    return <div key={props.task.id} className={isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n*/\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTasksTC} from \"./state/tasks-reducer\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(props.id))\r\n    }, [])\r\n\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport {\r\n    changeTodolistFilterAC,\r\n    createTodolistTC,\r\n    FilterValuesType, getTodolistsThunk,\r\n    removeTodolistAC, removeTodolistTC,\r\n    TodolistDomainType, updateTodolistTC\r\n} from './state/todolists-reducer'\r\nimport {createTaskTC,\r\n    removeTaskTC,\r\n    updateTaskStatusTC, updateTaskTitleTC\r\n} from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from './api/todolists-api'\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodolistsThunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string ) {\r\n        // const action = removeTaskAC(id, todolistId);\r\n        // dispatch(action);\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        // const action = addTaskAC(title, todolistId);\r\n        // dispatch(action);\r\n        dispatch(createTaskTC(title, todolistId))\r\n    }, []);\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        // const action = changeTaskStatusAC(id, status, todolistId);\r\n        // dispatch(action);\r\n        dispatch(updateTaskStatusTC(todolistId, id, status))\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        // const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        // dispatch(action);\r\n        dispatch(updateTaskTitleTC(todolistId, id, newTitle))\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        // const action = removeTodolistAC(id);\r\n        // dispatch(action);\r\n        dispatch(removeTodolistTC(id))\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        // const action = changeTodolistTitleAC(id, title);\r\n        // dispatch(action);\r\n        dispatch(updateTodolistTC(id, title))\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        // const action = addTodolistAC(title);\r\n        // dispatch(action);\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeTaskStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}