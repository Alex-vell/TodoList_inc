{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","console","log","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","task","id","isDone","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","addTask","removeTodolist","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","taskId","map","style","paddingTop","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","item","Paper","rootReducer","combineReducers","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0458e343.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    console.log('AddItemForm')\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n    console.log('EditableSpan')\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTask: (taskId: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, /*taskId: string*/) => void\r\n    changeTaskTitle: (taskId: string, newValue: string) => void\r\n    /*todolistId: string*/\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    console.log('Task')\r\n\r\n    const {id, title, isDone} = props.task\r\n\r\n    const onClickHandler = useCallback(() =>\r\n        props.removeTask(id, /*props.id*//* props.todolistId*/), [props.removeTask, id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked;\r\n        props.changeTaskStatus(id, newIsDoneValue, /*props.id*/);\r\n    }, [props.changeTaskStatus, id])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(id, newValue,/* props.id*/);\r\n    }, [props.changeTaskTitle, id])\r\n\r\n    return <div key={props.task.id} className={isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={isDone}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n\r\n    console.log('Todolist')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id);\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = useCallback(() => {\r\n        props.removeTodolist(props.id);\r\n    }, [props.removeTodolist, props.id])\r\n\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }, [props.changeTodolistTitle, props.id])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() =>\r\n        props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n\r\n    const onActiveClickHandler = useCallback(() =>\r\n        props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n\r\n    const onCompletedClickHandler = useCallback(() =>\r\n        props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\r\n\r\n\r\n    let tasksForTodolist = props.tasks;\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true);\r\n    }\r\n\r\n    const removeTask = useCallback((taskId: string) => {\r\n        props.removeTask(taskId, props.id)\r\n    }, [props.removeTask, props.id])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, newIsDoneValue: boolean,) => {\r\n        props.changeTaskStatus(taskId, newIsDoneValue, props.id)\r\n    }, [props.changeTaskStatus, props.id])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newValue: string) => {\r\n        props.changeTaskTitle(taskId, newValue, props.id)\r\n    }, [props.changeTaskTitle, props.id])\r\n\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <Task key={t.id}\r\n                                 task={t}\r\n                                 removeTask={removeTask}\r\n                                 changeTaskStatus={changeTaskStatus}\r\n                                 changeTaskTitle={changeTaskTitle}\r\n                        /*todolistId={props.id}*//>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            return state.map(t => t.id === action.id ? {...t, filter: action.filter} : t)\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        }\r\n        case 'ADD-TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [{id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]]\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t)\r\n            }\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n\r\n    console.log('AppWithRedux')\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((id: string, newTitle: string, todolistId: string) => {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((id: string) => {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasks[tl.id]}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}